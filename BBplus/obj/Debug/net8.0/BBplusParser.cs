//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\lance\Desktop\projects\BBplus\BBplus\BBplus\Content\BBplus.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BBplus.Content {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class BBplusParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, BOOL_OPERATOR=24, 
		INTEGER=25, FLOAT=26, STRING=27, BOOL=28, NULL=29, WHILE=30, IF=31, ELSE=32, 
		FUNCTION=33, PRIVATE=34, WS=35, SINGLELINE_COMMENT=36, MULTILINE_COMMENT=37, 
		IDENTIFIER=38, MOD=39, TYPE=40;
	public const int
		RULE_program = 0, RULE_mod = 1, RULE_class = 2, RULE_line = 3, RULE_statement = 4, 
		RULE_ifBlock = 5, RULE_elseIfBlock = 6, RULE_whileBlock = 7, RULE_functionBlock = 8, 
		RULE_assignement = 9, RULE_functionCall = 10, RULE_expression = 11, RULE_mult = 12, 
		RULE_add = 13, RULE_cmp = 14, RULE_bool = 15, RULE_constant = 16, RULE_block = 17;
	public static readonly string[] ruleNames = {
		"program", "mod", "class", "line", "statement", "ifBlock", "elseIfBlock", 
		"whileBlock", "functionBlock", "assignement", "functionCall", "expression", 
		"mult", "add", "cmp", "bool", "constant", "block"
	};

	private static readonly string[] _LiteralNames = {
		null, "'mod'", "'{'", "'}'", "'class'", "';'", "'('", "')'", "'.'", "'=>'", 
		"','", "':'", "'!'", "'*'", "'/'", "'%'", "'+'", "'-'", "'<'", "'>'", 
		"'<='", "'>='", "'=='", "'!='", null, null, null, null, null, null, null, 
		null, null, null, "'@'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"BOOL_OPERATOR", "INTEGER", "FLOAT", "STRING", "BOOL", "NULL", "WHILE", 
		"IF", "ELSE", "FUNCTION", "PRIVATE", "WS", "SINGLELINE_COMMENT", "MULTILINE_COMMENT", 
		"IDENTIFIER", "MOD", "TYPE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BBplus.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public BBplusParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(BBplusParser.Eof, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBBplusVisitor<TResult> typedVisitor = visitor as IBBplusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << WHILE) | (1L << IF) | (1L << IDENTIFIER) | (1L << MOD))) != 0)) {
				{
				{
				State = 36; line();
				}
				}
				State = 41;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 42; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(BBplusParser.IDENTIFIER, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.EnterMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.ExitMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBBplusVisitor<TResult> typedVisitor = visitor as IBBplusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModContext mod() {
		ModContext _localctx = new ModContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_mod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; Match(T__0);
			State = 45; Match(IDENTIFIER);
			State = 46; Match(T__1);
			State = 50;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << WHILE) | (1L << IF) | (1L << IDENTIFIER) | (1L << MOD))) != 0)) {
				{
				{
				State = 47; line();
				}
				}
				State = 52;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 53; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(BBplusParser.IDENTIFIER, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.EnterClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.ExitClass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBBplusVisitor<TResult> typedVisitor = visitor as IBBplusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassContext @class() {
		ClassContext _localctx = new ClassContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_class);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; Match(T__3);
			State = 56; Match(IDENTIFIER);
			State = 57; Match(T__1);
			State = 61;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << WHILE) | (1L << IF) | (1L << IDENTIFIER) | (1L << MOD))) != 0)) {
				{
				{
				State = 58; line();
				}
				}
				State = 63;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 64; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public WhileBlockContext whileBlock() {
			return GetRuleContext<WhileBlockContext>(0);
		}
		public FunctionBlockContext functionBlock() {
			return GetRuleContext<FunctionBlockContext>(0);
		}
		public ModContext mod() {
			return GetRuleContext<ModContext>(0);
		}
		public ClassContext @class() {
			return GetRuleContext<ClassContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBBplusVisitor<TResult> typedVisitor = visitor as IBBplusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_line);
		try {
			State = 72;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 66; statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 67; ifBlock();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 68; whileBlock();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 69; functionBlock();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 70; mod();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 71; @class();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public AssignementContext assignement() {
			return GetRuleContext<AssignementContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBBplusVisitor<TResult> typedVisitor = visitor as IBBplusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 74; assignement();
				}
				break;

			case 2:
				{
				State = 75; functionCall();
				}
				break;
			}
			State = 78; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(BBplusParser.IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(BBplusParser.ELSE, 0); }
		public ElseIfBlockContext elseIfBlock() {
			return GetRuleContext<ElseIfBlockContext>(0);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBBplusVisitor<TResult> typedVisitor = visitor as IBBplusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_ifBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(IF);
			State = 81; Match(T__5);
			State = 82; expression(0);
			State = 83; Match(T__6);
			State = 84; block();
			State = 87;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 85; Match(ELSE);
				State = 86; elseIfBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfBlockContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public ElseIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.EnterElseIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.ExitElseIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBBplusVisitor<TResult> typedVisitor = visitor as IBBplusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfBlockContext elseIfBlock() {
		ElseIfBlockContext _localctx = new ElseIfBlockContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_elseIfBlock);
		try {
			State = 91;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 89; block();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 90; ifBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileBlockContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(BBplusParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(BBplusParser.ELSE, 0); }
		public ElseIfBlockContext elseIfBlock() {
			return GetRuleContext<ElseIfBlockContext>(0);
		}
		public WhileBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.EnterWhileBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.ExitWhileBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBBplusVisitor<TResult> typedVisitor = visitor as IBBplusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileBlockContext whileBlock() {
		WhileBlockContext _localctx = new WhileBlockContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_whileBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(WHILE);
			State = 94; Match(T__5);
			State = 95; expression(0);
			State = 96; Match(T__6);
			State = 97; block();
			State = 100;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 98; Match(ELSE);
				State = 99; elseIfBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(BBplusParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BBplusParser.IDENTIFIER, i);
		}
		public ITerminalNode FUNCTION() { return GetToken(BBplusParser.FUNCTION, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode MOD() { return GetToken(BBplusParser.MOD, 0); }
		public ITerminalNode PRIVATE() { return GetToken(BBplusParser.PRIVATE, 0); }
		public FunctionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.EnterFunctionBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.ExitFunctionBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBBplusVisitor<TResult> typedVisitor = visitor as IBBplusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockContext functionBlock() {
		FunctionBlockContext _localctx = new FunctionBlockContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_functionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==MOD) {
				{
				State = 102; Match(MOD);
				State = 103; Match(T__7);
				}
			}

			State = 106; Match(IDENTIFIER);
			State = 107; Match(T__8);
			{
			State = 109;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PRIVATE) {
				{
				State = 108; Match(PRIVATE);
				}
			}

			}
			State = 111; Match(FUNCTION);
			State = 112; Match(T__5);
			State = 121;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 113; Match(IDENTIFIER);
				State = 118;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__9) {
					{
					{
					State = 114; Match(T__9);
					State = 115; Match(IDENTIFIER);
					}
					}
					State = 120;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 123; Match(T__6);
			State = 124; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignementContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(BBplusParser.IDENTIFIER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PRIVATE() { return GetToken(BBplusParser.PRIVATE, 0); }
		public AssignementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.EnterAssignement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.ExitAssignement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBBplusVisitor<TResult> typedVisitor = visitor as IBBplusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignementContext assignement() {
		AssignementContext _localctx = new AssignementContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_assignement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126; Match(IDENTIFIER);
			{
			State = 128;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PRIVATE) {
				{
				State = 127; Match(PRIVATE);
				}
			}

			}
			State = 130; Match(T__8);
			State = 131; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(BBplusParser.IDENTIFIER, 0); }
		public ITerminalNode MOD() { return GetToken(BBplusParser.MOD, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBBplusVisitor<TResult> typedVisitor = visitor as IBBplusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_functionCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==MOD) {
				{
				State = 133; Match(MOD);
				State = 134; Match(T__7);
				}
			}

			State = 137; Match(IDENTIFIER);
			State = 147;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				{
				State = 138; Match(T__10);
				State = 139; expression(0);
				State = 144;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,14,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 140; Match(T__9);
						State = 141; expression(0);
						}
						} 
					}
					State = 146;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,14,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstantExprContext : ExpressionContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.EnterConstantExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.ExitConstantExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBBplusVisitor<TResult> typedVisitor = visitor as IBBplusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdExprContext : ExpressionContext {
		public ITerminalNode IDENTIFIER() { return GetToken(BBplusParser.IDENTIFIER, 0); }
		public IdExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.EnterIdExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.ExitIdExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBBplusVisitor<TResult> typedVisitor = visitor as IBBplusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExprContext : ExpressionContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBBplusVisitor<TResult> typedVisitor = visitor as IBBplusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockExprContext : ExpressionContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.EnterBlockExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.ExitBlockExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBBplusVisitor<TResult> typedVisitor = visitor as IBBplusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExprContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.EnterParenExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.ExitParenExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBBplusVisitor<TResult> typedVisitor = visitor as IBBplusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExprContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.EnterNotExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.ExitNotExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBBplusVisitor<TResult> typedVisitor = visitor as IBBplusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultContext mult() {
			return GetRuleContext<MultContext>(0);
		}
		public MultExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.EnterMultExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.ExitMultExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBBplusVisitor<TResult> typedVisitor = visitor as IBBplusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		public AddExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.EnterAddExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.ExitAddExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBBplusVisitor<TResult> typedVisitor = visitor as IBBplusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CmpExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CmpContext cmp() {
			return GetRuleContext<CmpContext>(0);
		}
		public CmpExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.EnterCmpExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.ExitCmpExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBBplusVisitor<TResult> typedVisitor = visitor as IBBplusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public BoolExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.EnterBoolExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.ExitBoolExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBBplusVisitor<TResult> typedVisitor = visitor as IBBplusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				_localctx = new ConstantExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 150; constant();
				}
				break;

			case 2:
				{
				_localctx = new IdExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 151; Match(IDENTIFIER);
				}
				break;

			case 3:
				{
				_localctx = new FunctionCallExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 152; functionCall();
				}
				break;

			case 4:
				{
				_localctx = new BlockExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 153; block();
				}
				break;

			case 5:
				{
				_localctx = new ParenExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 154; Match(T__5);
				State = 155; expression(0);
				State = 156; Match(T__6);
				}
				break;

			case 6:
				{
				_localctx = new NotExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 158; Match(T__11);
				State = 159; expression(5);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 180;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 178;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
					case 1:
						{
						_localctx = new MultExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 162;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 163; mult();
						State = 164; expression(5);
						}
						break;

					case 2:
						{
						_localctx = new AddExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 166;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 167; add();
						State = 168; expression(4);
						}
						break;

					case 3:
						{
						_localctx = new CmpExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 170;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 171; cmp();
						State = 172; expression(3);
						}
						break;

					case 4:
						{
						_localctx = new BoolExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 174;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 175; @bool();
						State = 176; expression(2);
						}
						break;
					}
					} 
				}
				State = 182;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultContext : ParserRuleContext {
		public MultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.EnterMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.ExitMult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBBplusVisitor<TResult> typedVisitor = visitor as IBBplusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMult(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultContext mult() {
		MultContext _localctx = new MultContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_mult);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__13) | (1L << T__14))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBBplusVisitor<TResult> typedVisitor = visitor as IBBplusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_add);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			_la = _input.La(1);
			if ( !(_la==T__15 || _la==T__16) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmpContext : ParserRuleContext {
		public CmpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.EnterCmp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.ExitCmp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBBplusVisitor<TResult> typedVisitor = visitor as IBBplusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CmpContext cmp() {
		CmpContext _localctx = new CmpContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_cmp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public ITerminalNode BOOL_OPERATOR() { return GetToken(BBplusParser.BOOL_OPERATOR, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBBplusVisitor<TResult> typedVisitor = visitor as IBBplusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_bool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189; Match(BOOL_OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(BBplusParser.INTEGER, 0); }
		public ITerminalNode FLOAT() { return GetToken(BBplusParser.FLOAT, 0); }
		public ITerminalNode STRING() { return GetToken(BBplusParser.STRING, 0); }
		public ITerminalNode BOOL() { return GetToken(BBplusParser.BOOL, 0); }
		public ITerminalNode NULL() { return GetToken(BBplusParser.NULL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBBplusVisitor<TResult> typedVisitor = visitor as IBBplusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << STRING) | (1L << BOOL) | (1L << NULL))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBplusListener typedListener = listener as IBBplusListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBBplusVisitor<TResult> typedVisitor = visitor as IBBplusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; Match(T__1);
			State = 197;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << WHILE) | (1L << IF) | (1L << IDENTIFIER) | (1L << MOD))) != 0)) {
				{
				{
				State = 194; line();
				}
				}
				State = 199;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 200; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 4);

		case 1: return Precpred(_ctx, 3);

		case 2: return Precpred(_ctx, 2);

		case 3: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3*\xCD\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x3\x2\a\x2(\n\x2\f\x2\xE\x2"+
		"+\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\a\x3\x33\n\x3\f\x3\xE\x3\x36"+
		"\v\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\a\x4>\n\x4\f\x4\xE\x4\x41\v"+
		"\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5K\n\x5\x3\x6"+
		"\x3\x6\x5\x6O\n\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a"+
		"Z\n\a\x3\b\x3\b\x5\b^\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\tg\n\t"+
		"\x3\n\x3\n\x5\nk\n\n\x3\n\x3\n\x3\n\x5\np\n\n\x3\n\x3\n\x3\n\x3\n\x3\n"+
		"\a\nw\n\n\f\n\xE\nz\v\n\x5\n|\n\n\x3\n\x3\n\x3\n\x3\v\x3\v\x5\v\x83\n"+
		"\v\x3\v\x3\v\x3\v\x3\f\x3\f\x5\f\x8A\n\f\x3\f\x3\f\x3\f\x3\f\x3\f\a\f"+
		"\x91\n\f\f\f\xE\f\x94\v\f\x5\f\x96\n\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3"+
		"\r\x3\r\x3\r\x3\r\x3\r\x5\r\xA3\n\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r"+
		"\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\a\r\xB5\n\r\f\r\xE\r\xB8"+
		"\v\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12"+
		"\x3\x13\x3\x13\a\x13\xC6\n\x13\f\x13\xE\x13\xC9\v\x13\x3\x13\x3\x13\x3"+
		"\x13\x2\x2\x3\x18\x14\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12"+
		"\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2\x2\x6\x3\x2"+
		"\xF\x11\x3\x2\x12\x13\x3\x2\x14\x19\x3\x2\x1B\x1F\xD8\x2)\x3\x2\x2\x2"+
		"\x4.\x3\x2\x2\x2\x6\x39\x3\x2\x2\x2\bJ\x3\x2\x2\x2\nN\x3\x2\x2\x2\fR\x3"+
		"\x2\x2\x2\xE]\x3\x2\x2\x2\x10_\x3\x2\x2\x2\x12j\x3\x2\x2\x2\x14\x80\x3"+
		"\x2\x2\x2\x16\x89\x3\x2\x2\x2\x18\xA2\x3\x2\x2\x2\x1A\xB9\x3\x2\x2\x2"+
		"\x1C\xBB\x3\x2\x2\x2\x1E\xBD\x3\x2\x2\x2 \xBF\x3\x2\x2\x2\"\xC1\x3\x2"+
		"\x2\x2$\xC3\x3\x2\x2\x2&(\x5\b\x5\x2\'&\x3\x2\x2\x2(+\x3\x2\x2\x2)\'\x3"+
		"\x2\x2\x2)*\x3\x2\x2\x2*,\x3\x2\x2\x2+)\x3\x2\x2\x2,-\a\x2\x2\x3-\x3\x3"+
		"\x2\x2\x2./\a\x3\x2\x2/\x30\a(\x2\x2\x30\x34\a\x4\x2\x2\x31\x33\x5\b\x5"+
		"\x2\x32\x31\x3\x2\x2\x2\x33\x36\x3\x2\x2\x2\x34\x32\x3\x2\x2\x2\x34\x35"+
		"\x3\x2\x2\x2\x35\x37\x3\x2\x2\x2\x36\x34\x3\x2\x2\x2\x37\x38\a\x5\x2\x2"+
		"\x38\x5\x3\x2\x2\x2\x39:\a\x6\x2\x2:;\a(\x2\x2;?\a\x4\x2\x2<>\x5\b\x5"+
		"\x2=<\x3\x2\x2\x2>\x41\x3\x2\x2\x2?=\x3\x2\x2\x2?@\x3\x2\x2\x2@\x42\x3"+
		"\x2\x2\x2\x41?\x3\x2\x2\x2\x42\x43\a\x5\x2\x2\x43\a\x3\x2\x2\x2\x44K\x5"+
		"\n\x6\x2\x45K\x5\f\a\x2\x46K\x5\x10\t\x2GK\x5\x12\n\x2HK\x5\x4\x3\x2I"+
		"K\x5\x6\x4\x2J\x44\x3\x2\x2\x2J\x45\x3\x2\x2\x2J\x46\x3\x2\x2\x2JG\x3"+
		"\x2\x2\x2JH\x3\x2\x2\x2JI\x3\x2\x2\x2K\t\x3\x2\x2\x2LO\x5\x14\v\x2MO\x5"+
		"\x16\f\x2NL\x3\x2\x2\x2NM\x3\x2\x2\x2OP\x3\x2\x2\x2PQ\a\a\x2\x2Q\v\x3"+
		"\x2\x2\x2RS\a!\x2\x2ST\a\b\x2\x2TU\x5\x18\r\x2UV\a\t\x2\x2VY\x5$\x13\x2"+
		"WX\a\"\x2\x2XZ\x5\xE\b\x2YW\x3\x2\x2\x2YZ\x3\x2\x2\x2Z\r\x3\x2\x2\x2["+
		"^\x5$\x13\x2\\^\x5\f\a\x2][\x3\x2\x2\x2]\\\x3\x2\x2\x2^\xF\x3\x2\x2\x2"+
		"_`\a \x2\x2`\x61\a\b\x2\x2\x61\x62\x5\x18\r\x2\x62\x63\a\t\x2\x2\x63\x66"+
		"\x5$\x13\x2\x64\x65\a\"\x2\x2\x65g\x5\xE\b\x2\x66\x64\x3\x2\x2\x2\x66"+
		"g\x3\x2\x2\x2g\x11\x3\x2\x2\x2hi\a)\x2\x2ik\a\n\x2\x2jh\x3\x2\x2\x2jk"+
		"\x3\x2\x2\x2kl\x3\x2\x2\x2lm\a(\x2\x2mo\a\v\x2\x2np\a$\x2\x2on\x3\x2\x2"+
		"\x2op\x3\x2\x2\x2pq\x3\x2\x2\x2qr\a#\x2\x2r{\a\b\x2\x2sx\a(\x2\x2tu\a"+
		"\f\x2\x2uw\a(\x2\x2vt\x3\x2\x2\x2wz\x3\x2\x2\x2xv\x3\x2\x2\x2xy\x3\x2"+
		"\x2\x2y|\x3\x2\x2\x2zx\x3\x2\x2\x2{s\x3\x2\x2\x2{|\x3\x2\x2\x2|}\x3\x2"+
		"\x2\x2}~\a\t\x2\x2~\x7F\x5$\x13\x2\x7F\x13\x3\x2\x2\x2\x80\x82\a(\x2\x2"+
		"\x81\x83\a$\x2\x2\x82\x81\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x84\x3\x2"+
		"\x2\x2\x84\x85\a\v\x2\x2\x85\x86\x5\x18\r\x2\x86\x15\x3\x2\x2\x2\x87\x88"+
		"\a)\x2\x2\x88\x8A\a\n\x2\x2\x89\x87\x3\x2\x2\x2\x89\x8A\x3\x2\x2\x2\x8A"+
		"\x8B\x3\x2\x2\x2\x8B\x95\a(\x2\x2\x8C\x8D\a\r\x2\x2\x8D\x92\x5\x18\r\x2"+
		"\x8E\x8F\a\f\x2\x2\x8F\x91\x5\x18\r\x2\x90\x8E\x3\x2\x2\x2\x91\x94\x3"+
		"\x2\x2\x2\x92\x90\x3\x2\x2\x2\x92\x93\x3\x2\x2\x2\x93\x96\x3\x2\x2\x2"+
		"\x94\x92\x3\x2\x2\x2\x95\x8C\x3\x2\x2\x2\x95\x96\x3\x2\x2\x2\x96\x17\x3"+
		"\x2\x2\x2\x97\x98\b\r\x1\x2\x98\xA3\x5\"\x12\x2\x99\xA3\a(\x2\x2\x9A\xA3"+
		"\x5\x16\f\x2\x9B\xA3\x5$\x13\x2\x9C\x9D\a\b\x2\x2\x9D\x9E\x5\x18\r\x2"+
		"\x9E\x9F\a\t\x2\x2\x9F\xA3\x3\x2\x2\x2\xA0\xA1\a\xE\x2\x2\xA1\xA3\x5\x18"+
		"\r\a\xA2\x97\x3\x2\x2\x2\xA2\x99\x3\x2\x2\x2\xA2\x9A\x3\x2\x2\x2\xA2\x9B"+
		"\x3\x2\x2\x2\xA2\x9C\x3\x2\x2\x2\xA2\xA0\x3\x2\x2\x2\xA3\xB6\x3\x2\x2"+
		"\x2\xA4\xA5\f\x6\x2\x2\xA5\xA6\x5\x1A\xE\x2\xA6\xA7\x5\x18\r\a\xA7\xB5"+
		"\x3\x2\x2\x2\xA8\xA9\f\x5\x2\x2\xA9\xAA\x5\x1C\xF\x2\xAA\xAB\x5\x18\r"+
		"\x6\xAB\xB5\x3\x2\x2\x2\xAC\xAD\f\x4\x2\x2\xAD\xAE\x5\x1E\x10\x2\xAE\xAF"+
		"\x5\x18\r\x5\xAF\xB5\x3\x2\x2\x2\xB0\xB1\f\x3\x2\x2\xB1\xB2\x5 \x11\x2"+
		"\xB2\xB3\x5\x18\r\x4\xB3\xB5\x3\x2\x2\x2\xB4\xA4\x3\x2\x2\x2\xB4\xA8\x3"+
		"\x2\x2\x2\xB4\xAC\x3\x2\x2\x2\xB4\xB0\x3\x2\x2\x2\xB5\xB8\x3\x2\x2\x2"+
		"\xB6\xB4\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7\x19\x3\x2\x2\x2\xB8\xB6\x3"+
		"\x2\x2\x2\xB9\xBA\t\x2\x2\x2\xBA\x1B\x3\x2\x2\x2\xBB\xBC\t\x3\x2\x2\xBC"+
		"\x1D\x3\x2\x2\x2\xBD\xBE\t\x4\x2\x2\xBE\x1F\x3\x2\x2\x2\xBF\xC0\a\x1A"+
		"\x2\x2\xC0!\x3\x2\x2\x2\xC1\xC2\t\x5\x2\x2\xC2#\x3\x2\x2\x2\xC3\xC7\a"+
		"\x4\x2\x2\xC4\xC6\x5\b\x5\x2\xC5\xC4\x3\x2\x2\x2\xC6\xC9\x3\x2\x2\x2\xC7"+
		"\xC5\x3\x2\x2\x2\xC7\xC8\x3\x2\x2\x2\xC8\xCA\x3\x2\x2\x2\xC9\xC7\x3\x2"+
		"\x2\x2\xCA\xCB\a\x5\x2\x2\xCB%\x3\x2\x2\x2\x16)\x34?JNY]\x66jox{\x82\x89"+
		"\x92\x95\xA2\xB4\xB6\xC7";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace BBplus.Content
